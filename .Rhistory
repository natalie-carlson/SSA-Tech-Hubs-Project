# topics_interactions$V12.V21 <- topics_interactions$V12*topics_interactions$V21
# topics_interactions$V13.V3 <- topics_interactions$V13*topics_interactions$V3
# topics_interactions$V13.V8 <- topics_interactions$V13*topics_interactions$V8
# topics_interactions$V13.V18 <- topics_interactions$V13*topics_interactions$V18
# topics_interactions$V13.V10 <- topics_interactions$V13*topics_interactions$V10
# topics_interactions$V13.V21 <- topics_interactions$V13*topics_interactions$V21
# topics_interactions$V17.V3 <- topics_interactions$V17*topics_interactions$V3
# topics_interactions$V17.V8 <- topics_interactions$V17*topics_interactions$V8
# topics_interactions$V17.V18 <- topics_interactions$V17*topics_interactions$V18
# topics_interactions$V17.V10 <- topics_interactions$V17*topics_interactions$V10
# topics_interactions$V17.V21 <- topics_interactions$V17*topics_interactions$V21
topics_interactions$V3.V1 <- topics_interactions$V3*topics_interactions$V1
topics_interactions$V3.V2 <- topics_interactions$V3*topics_interactions$V2
topics_interactions$V3.V4 <- topics_interactions$V3*topics_interactions$V4
topics_interactions$V3.V5 <- topics_interactions$V3*topics_interactions$V5
topics_interactions$V3.V6 <- topics_interactions$V3*topics_interactions$V6
topics_interactions$V3.V7 <- topics_interactions$V3*topics_interactions$V7
topics_interactions$V3.V8 <- topics_interactions$V3*topics_interactions$V8
topics_interactions$V3.V9 <- topics_interactions$V3*topics_interactions$V9
topics_interactions$V3.V10 <- topics_interactions$V3*topics_interactions$V10
topics_interactions$V3.V11 <- topics_interactions$V3*topics_interactions$V11
topics_interactions$V3.V12 <- topics_interactions$V3*topics_interactions$V12
topics_interactions$V3.V13 <- topics_interactions$V3*topics_interactions$V13
topics_interactions$V3.V14 <- topics_interactions$V3*topics_interactions$V14
topics_interactions$V3.V15 <- topics_interactions$V3*topics_interactions$V15
topics_interactions$V3.V16 <- topics_interactions$V3*topics_interactions$V16
topics_interactions$V3.V17 <- topics_interactions$V3*topics_interactions$V17
topics_interactions$V3.V18 <- topics_interactions$V3*topics_interactions$V18
topics_interactions$V3.V19 <- topics_interactions$V3*topics_interactions$V19
topics_interactions$V3.V20 <- topics_interactions$V3*topics_interactions$V20
topics_interactions$V3.V21 <- topics_interactions$V3*topics_interactions$V21
topics_interactions$V3.V22 <- topics_interactions$V3*topics_interactions$V22
topics_interactions$funding_dummy <- descriptions_categories$funding_dummy
binomial1 <- glm(funding_dummy ~ ., topics_interactions, family="binomial")
topic_proportions$funding_dummy <- descriptions_categories$funding_dummy
binomial2 <- glm(funding_dummy ~ ., topic_proportions, family="binomial")
## Funding by geographic source
# geographic_source <- read.csv("investors.csv", header=TRUE, stringsAsFactors=FALSE)
# descriptions_categories <- join(descriptions_categories, geographic_source, by="investors")
# descriptions_categories$african_funding <- ifelse(descriptions_categories$investor_type=="african", 1, 0)
# descriptions_categories$international_funding <- ifelse(descriptions_categories$investor_type=="international", 1, 0)
# have_funding_source <- filter(descriptions_categories, african_funding==1 | international_funding==1)
# ggplot(have_funding_source, aes(average_score, total_funding, color=investor_type)) + geom_point() + ylim(0,50000)
## CLASSIFICATION ANALYSIS
#classify bottom 20% as 0 and top 20% as 1 for training
library(quanteda)
dtm <- dfm(descriptions$descriptions, removePunct = TRUE, ignoredFeatures = c(stopwords(), "창"))
dtm <- trim(dtm, minCount=5, minDoc=5)
dtm <- as.data.frame(dtm)
dtm$average_score <- descriptions$average_score
bottom_quantile <- quantile(dtm$average_score, 0.20)
top_quantile <- quantile(dtm$average_score, 0.80)
dtm_train_full <- filter(dtm, average_score<bottom_quantile | average_score>top_quantile)
dtm_test_full <- filter(dtm, average_score>=bottom_quantile & average_score<=top_quantile)
dtm_train <- dtm_train_full
dtm_test <- dtm_test_full
dtm_train$training_var <- ifelse(dtm_train$average_score<bottom_quantile, 0, 1)
dtm_test$training_var <- NA
dtm_train$average_score <- NULL
dtm_test$average_score <- NULL
library(useful)
theForm <- training_var ~ .
masterX <- build.x(theForm, data=dtm_train)
masterY <- build.y(theForm, data=dtm_train)
library(glmnet)
set.seed(102)
#glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
#plot(glm1, xvar="lambda", label=TRUE)
cv.glm1 <- cv.glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
plot(cv.glm1)
best_lambda <- cv.glm1$lambda.min
glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial', lambda=best_lambda)
#coefficient table
ind <- which(coef(glm1) != 0)
df <- data.frame(
feature=rownames(coef(glm1))[ind],
coefficient=coef(glm1)[ind]
)
df <- df[order(df$coefficient),]
kable(df, row.names = FALSE)
prediction <- predict(glm1, as.matrix(dtm), s=best_lambda, type="class")
probability <- predict(glm1, as.matrix(dtm), s=best_lambda, type="response")
dtm$prediction <- prediction
dtm$prob <- probability
descriptions_categories$prob <- dtm$prob
test <- filter(descriptions_categories, average_score>=bottom_quantile & average_score<=top_quantile)
dtm$country <- descriptions_categories$country
dtm_test_full <- filter(dtm, average_score>=bottom_quantile & average_score<=top_quantile)
binomial1 <- glm(funding_dummy ~ prob + country, dtm_test_full, family="binomial")
library(quanteda)
dtm <- dfm(descriptions$descriptions, removePunct = TRUE, ignoredFeatures = c(stopwords(), "창"))
dtm <- trim(dtm, minCount=5, minDoc=5)
dtm <- as.data.frame(dtm)
dtm$average_score <- descriptions$average_score
bottom_quantile <- quantile(dtm$average_score, 0.20)
top_quantile <- quantile(dtm$average_score, 0.80)
dtm_train_full <- filter(dtm, average_score<bottom_quantile | average_score>top_quantile)
dtm_test_full <- filter(dtm, average_score>=bottom_quantile & average_score<=top_quantile)
dtm$country <- descriptions_categories$country
dtm_test_full <- filter(dtm, average_score>=bottom_quantile & average_score<=top_quantile)
dtm$prob <- probability
dtm_test_full <- filter(dtm, average_score>=bottom_quantile & average_score<=top_quantile)
class(dtm$prob)
dtm$prob <- as.vector(probability)
dtm$prediction <- as.vector(prediction)
dtm$prob <- as.vector(probability)
descriptions_categories$prob <- dtm$prob
dtm$country <- descriptions_categories$country
dtm_test_full <- filter(dtm, average_score>=bottom_quantile & average_score<=top_quantile)
library(quanteda)
dtm <- dfm(descriptions$descriptions, removePunct = TRUE, ignoredFeatures = c(stopwords(), "창"))
dtm <- trim(dtm, minCount=5, minDoc=5)
dtm <- as.data.frame(dtm)
dtm$average_score <- descriptions$average_score
bottom_quantile <- quantile(dtm$average_score, 0.20)
top_quantile <- quantile(dtm$average_score, 0.80)
dtm_train_full <- filter(dtm, average_score<bottom_quantile | average_score>top_quantile)
dtm_test_full <- filter(dtm, average_score>=bottom_quantile & average_score<=top_quantile)
dtm_train <- dtm_train_full
dtm_test <- dtm_test_full
dtm_train$training_var <- ifelse(dtm_train$average_score<bottom_quantile, 0, 1)
dtm_test$training_var <- NA
dtm_train$average_score <- NULL
dtm_test$average_score <- NULL
library(useful)
theForm <- training_var ~ .
masterX <- build.x(theForm, data=dtm_train)
masterY <- build.y(theForm, data=dtm_train)
library(glmnet)
set.seed(102)
#glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
#plot(glm1, xvar="lambda", label=TRUE)
cv.glm1 <- cv.glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
plot(cv.glm1)
best_lambda <- cv.glm1$lambda.min
glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial', lambda=best_lambda)
#coefficient table
ind <- which(coef(glm1) != 0)
df <- data.frame(
feature=rownames(coef(glm1))[ind],
coefficient=coef(glm1)[ind]
)
df <- df[order(df$coefficient),]
kable(df, row.names = FALSE)
prediction <- predict(glm1, as.matrix(dtm), s=best_lambda, type="class")
probability <- predict(glm1, as.matrix(dtm), s=best_lambda, type="response")
dtm$prediction <- as.vector(prediction)
dtm$prob <- as.vector(probability)
descriptions_categories$prob <- dtm$prob
test_data_only <- filter(descriptions_categories, average_score>=bottom_quantile & average_score<=top_quantile)
binomial1 <- glm(funding_dummy ~ prob + country, test_data_only, family="binomial")
summary(binomial1)
binomial1 <- glm(funding_dummy ~ prob + country, descriptions_categories, family="binomial")
summary(binomial1)
drops <- c("total_funding", "names", "descriptions", "wordcount", "score_sd", "num_responses", "clean_text", "dup1", "dup2", "match", "venture", "equity_crowdfunding", "venture_or_pe", "funding_type", "funding_rounds", "seed_funding", "venture_pe_funding", "investors", "seed")
dummy_df<- descriptions_categories[ , !(names(descriptions_categories) %in% drops)]
binomial1 <- glm(funding_dummy ~ prob + country + ., dummy_df, family="binomial")
summary(binomial1)
library(quanteda)
dtm <- dfm(descriptions$descriptions, removePunct = TRUE, ignoredFeatures = c(stopwords(), "창"))
dtm <- trim(dtm, minCount=5, minDoc=5)
dtm <- as.data.frame(dtm)
dtm$average_score <- descriptions$average_score
bottom_quantile <- quantile(dtm$average_score, 0.20)
top_quantile <- quantile(dtm$average_score, 0.80)
dtm_train_full <- filter(dtm, average_score<bottom_quantile | average_score>top_quantile)
dtm_test_full <- filter(dtm, average_score>=bottom_quantile & average_score<=top_quantile)
dtm_train <- dtm_train_full
dtm_test <- dtm_test_full
dtm_train$training_var <- ifelse(dtm_train$average_score<bottom_quantile, 0, 1)
dtm_test$training_var <- NA
dtm_train$average_score <- NULL
dtm_test$average_score <- NULL
library(useful)
theForm <- training_var ~ .
masterX <- build.x(theForm, data=dtm_train)
masterY <- build.y(theForm, data=dtm_train)
library(glmnet)
set.seed(102)
#glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
#plot(glm1, xvar="lambda", label=TRUE)
cv.glm1 <- cv.glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
plot(cv.glm1)
best_lambda <- cv.glm1$lambda.min
glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial', lambda=best_lambda)
#coefficient table
ind <- which(coef(glm1) != 0)
df <- data.frame(
feature=rownames(coef(glm1))[ind],
coefficient=coef(glm1)[ind]
)
df <- df[order(df$coefficient),]
kable(df, row.names = FALSE)
prediction <- predict(glm1, as.matrix(dtm), s=best_lambda, type="class")
probability <- predict(glm1, as.matrix(dtm), s=best_lambda, type="response")
dtm$prediction <- as.vector(prediction)
dtm$prob <- as.vector(probability)
descriptions_categories$prob <- dtm$prob
test_data_only <- filter(descriptions_categories, average_score>=bottom_quantile & average_score<=top_quantile)
binomial1 <- glm(funding_dummy ~ prob + country, test_data_only, family="binomial")
summary(binomial1)
binomial1 <- glm(funding_dummy ~ prob + country, descriptions_categories, family="binomial")
summary(binomial1)
library(quanteda)
dtm <- dfm(descriptions$descriptions, removePunct = TRUE)
dtm <- trim(dtm, minCount=5, minDoc=5)
dtm <- as.data.frame(dtm)
dtm$average_score <- descriptions$average_score
bottom_quantile <- quantile(dtm$average_score, 0.20)
top_quantile <- quantile(dtm$average_score, 0.80)
dtm_train_full <- filter(dtm, average_score<bottom_quantile | average_score>top_quantile)
dtm_test_full <- filter(dtm, average_score>=bottom_quantile & average_score<=top_quantile)
dtm_train <- dtm_train_full
dtm_test <- dtm_test_full
dtm_train$training_var <- ifelse(dtm_train$average_score<bottom_quantile, 0, 1)
dtm_test$training_var <- NA
dtm_train$average_score <- NULL
dtm_test$average_score <- NULL
library(useful)
theForm <- training_var ~ .
masterX <- build.x(theForm, data=dtm_train)
masterY <- build.y(theForm, data=dtm_train)
library(glmnet)
set.seed(102)
#glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
#plot(glm1, xvar="lambda", label=TRUE)
cv.glm1 <- cv.glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
plot(cv.glm1)
best_lambda <- cv.glm1$lambda.min
glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial', lambda=best_lambda)
#coefficient table
ind <- which(coef(glm1) != 0)
df <- data.frame(
feature=rownames(coef(glm1))[ind],
coefficient=coef(glm1)[ind]
)
df <- df[order(df$coefficient),]
kable(df, row.names = FALSE)
prediction <- predict(glm1, as.matrix(dtm), s=best_lambda, type="class")
probability <- predict(glm1, as.matrix(dtm), s=best_lambda, type="response")
dtm$prediction <- as.vector(prediction)
dtm$prob <- as.vector(probability)
descriptions_categories$prob <- dtm$prob
test_data_only <- filter(descriptions_categories, average_score>=bottom_quantile & average_score<=top_quantile)
binomial1 <- glm(funding_dummy ~ prob + country, test_data_only, family="binomial")
binomial1 <- glm(funding_dummy ~ prob + country, descriptions_categories, family="binomial")
summary(binomial1)
binomial1 <- glm(funding_dummy ~ prob + country, test_data_only, family="binomial")
summary(binomial1)
library(plyr)
library(dplyr)
library(ggplot2)
library(matrixStats)
library(tm)
library(knitr)
setwd("/Users/nataliecarlson/Desktop/Tech Hubs/SSA Project Data and Analysis")
descriptions <- read.csv("descriptions.csv", header=TRUE, stringsAsFactors=FALSE)
descriptions <- descriptions[,-1]
master <- read.csv("SSA_Startups_4.csv", header=TRUE, stringsAsFactors=FALSE)
master <- master[-1,13:884]
master[master==2] <- 0
#good_data <- filter(master, Q873_1=="" & Q873_2=="")
good_data <- master
good_data <- as.data.frame(sapply(good_data, as.numeric))
good_data <- good_data[,1:870]
num_responses <- colSums(good_data!=0, na.rm=TRUE)
average_scores <- colMeans(good_data, na.rm=TRUE)
standard_devs <- colSds(as.matrix(good_data), na.rm=TRUE)
ggplot() + aes(average_scores) + geom_histogram(binwidth = 0.05) + scale_x_continuous(breaks = scales::pretty_breaks(n = 11), limits = c(-0.05, 1.05))
descriptions$average_score <- average_scores
descriptions$score_sd <- standard_devs
descriptions$num_responses <- num_responses
descriptions$funding_dummy <- ifelse(descriptions$total_funding>0,1,0)
ggplot(descriptions, aes(x=average_scores, fill=factor(funding_dummy))) + geom_histogram(binwidth = 0.05) + scale_x_continuous(breaks = scales::pretty_breaks(n = 11), limits = c(-0.05, 1.05))
bottom_quartile <- quantile(descriptions_categories$average_score, 0.25)
top_quartile <- quantile(descriptions_categories$average_score, 0.75)
descriptions_categories$middle50 <- ifelse(average_score>=bottom_quartile & average_score<=top_quartile, 1, 0)
binomial1 <- glm(funding_dummy ~ middle50 + country, descriptions_categories, family="binomial")
bottom_quartile <- quantile(descriptions_categories$average_score, 0.25)
top_quartile <- quantile(descriptions_categories$average_score, 0.75)
descriptions_categories$middle50 <- ifelse(descriptions_categories$average_score>=bottom_quartile & descriptions_categories$average_score<=top_quartile, 1, 0)
binomial1 <- glm(funding_dummy ~ middle50 + country, descriptions_categories, family="binomial")
summary(binomial1)
bottom_quartile <- quantile(descriptions_categories$average_score, 0.4)
top_quartile <- quantile(descriptions_categories$average_score, 0.6)
descriptions_categories$middle50 <- ifelse(descriptions_categories$average_score>=bottom_quartile & descriptions_categories$average_score<=top_quartile, 1, 0)
binomial1 <- glm(funding_dummy ~ middle50 + country, descriptions_categories, family="binomial")
summary(binomial1)
bottom_quartile <- quantile(descriptions_categories$average_score, 0.2)
top_quartile <- quantile(descriptions_categories$average_score, 0.6)
descriptions_categories$middle50 <- ifelse(descriptions_categories$average_score>=bottom_quartile & descriptions_categories$average_score<=top_quartile, 1, 0)
binomial1 <- glm(funding_dummy ~ middle50 + country, descriptions_categories, family="binomial")
summary(binomial1)
bottom_quartile <- quantile(descriptions_categories$average_score, 0.2)
top_quartile <- quantile(descriptions_categories$average_score, 0.8)
descriptions_categories$middle50 <- ifelse(descriptions_categories$average_score>=bottom_quartile & descriptions_categories$average_score<=top_quartile, 1, 0)
binomial1 <- glm(funding_dummy ~ middle50 + country, descriptions_categories, family="binomial")
summary(binomial1)
bottom_quartile <- quantile(descriptions_categories$average_score, 0.25)
top_quartile <- quantile(descriptions_categories$average_score, 0.75)
descriptions_categories$middle50 <- ifelse(descriptions_categories$average_score>bottom_quartile & descriptions_categories$average_score<top_quartile, 1, 0)
binomial1 <- glm(funding_dummy ~ middle50 + country, descriptions_categories, family="binomial")
summary(binomial1)
bottom_quartile <- quantile(descriptions_categories$average_score, 0.25)
top_quartile <- quantile(descriptions_categories$average_score, 0.75)
descriptions_categories$middle50 <- ifelse(descriptions_categories$average_score>=bottom_quartile & descriptions_categories$average_score<=top_quartile, 1, 0)
binomial1 <- glm(funding_dummy ~ middle50 + country, descriptions_categories, family="binomial")
summary(binomial1)
drops <- c("total_funding", "names", "descriptions", "wordcount", "score_sd", "num_responses", "clean_text", "dup1", "dup2", "match", "venture", "equity_crowdfunding", "venture_or_pe", "funding_type", "funding_rounds", "seed_funding", "venture_pe_funding", "investors", "seed")
dummy_df<- descriptions_categories[ , !(names(descriptions_categories) %in% drops)]
binomial1 <- glm(funding_dummy ~ middle50 + country + ., dummy_df, family="binomial")
summary(binomial1)
median <- quantile(descriptions_categories$average_score, 0.50)
top_quartile <- quantile(descriptions_categories$average_score, 0.75)
descriptions_categories$bottom50 <- ifelse(descriptions_categories$average_score<median, 1, 0)
binomial1 <- glm(funding_dummy ~ bottom50 + country, descriptions_categories, family="binomial")
summary(binomial1)
quartile1 <- quantile(descriptions_categories$average_score, 0.25)
quartile2 <- quantile(descriptions_categories$average_score, 0.50)
quartile3 <- quantile(descriptions_categories$average_score, 0.75)
descriptions_categories$first_quartile <- ifelse(descriptions_categories$average_score<quartile1, 1, 0)
descriptions_categories$second_quartile <- ifelse(descriptions_categories$average_score<quartile2 & descriptions_categories$average_score>=quartile1, 1, 0)
descriptions_categories$third_quartile <- ifelse(descriptions_categories$average_score<quartile3 & descriptions_categories$average_score>=quartile2, 1, 0)
binomial1 <- glm(funding_dummy ~ first_quartile + second_quartile + third_quartile + country, descriptions_categories, family="binomial")
summary(binomial1)
descriptions_categories$middle50 <- NULL
descriptions_categories$bottom50 <- NULL
drops <- c("total_funding", "names", "descriptions", "wordcount", "score_sd", "num_responses", "clean_text", "dup1", "dup2", "match", "venture", "equity_crowdfunding", "venture_or_pe", "funding_type", "funding_rounds", "seed_funding", "venture_pe_funding", "investors", "seed")
dummy_df<- descriptions_categories[ , !(names(descriptions_categories) %in% drops)]
binomial1 <- glm(funding_dummy ~ first_quartile + second_quartile + third_quartile + country + ., dummy_df, family="binomial")
summary(binomial1)
drops <- c("total_funding", "names", "descriptions", "wordcount", "score_sd", "num_responses", "clean_text", "dup1", "dup2", "match", "venture", "equity_crowdfunding", "venture_or_pe", "funding_type", "funding_rounds", "seed_funding", "venture_pe_funding", "investors", "seed", "prob")
dummy_df<- descriptions_categories[ , !(names(descriptions_categories) %in% drops)]
binomial1 <- glm(funding_dummy ~ first_quartile + second_quartile + third_quartile + country + ., dummy_df, family="binomial")
summary(binomial1)
descriptions_categories$first_quartile <- NULL
descriptions_categories$second_quartile <- NULL
descriptions_categories$third_quartile <- NULL
decile1 <- quantile(descriptions_categories$average_score, 0.1)
decile2 <- quantile(descriptions_categories$average_score, 0.2)
decile3 <- quantile(descriptions_categories$average_score, 0.3)
decile4 <- quantile(descriptions_categories$average_score, 0.4)
decile5 <- quantile(descriptions_categories$average_score, 0.5)
decile6 <- quantile(descriptions_categories$average_score, 0.6)
decile7 <- quantile(descriptions_categories$average_score, 0.7)
decile8 <- quantile(descriptions_categories$average_score, 0.8)
decile9 <- quantile(descriptions_categories$average_score, 0.9)
descriptions_categories$first_decile <- ifelse(descriptions_categories$average_score<decile1, 1, 0)
descriptions_categories$second_decile <- ifelse(descriptions_categories$average_score<decile2 & descriptions_categories$average_score>=decile1, 1, 0)
descriptions_categories$third_decile <- ifelse(descriptions_categories$average_score<decile3 & descriptions_categories$average_score>=decile2, 1, 0)
descriptions_categories$fourth_decile <- ifelse(descriptions_categories$average_score<decile4 & descriptions_categories$average_score>=decile3, 1, 0)
descriptions_categories$fifth_decile <- ifelse(descriptions_categories$average_score<decile5 & descriptions_categories$average_score>=decile4, 1, 0)
descriptions_categories$sixth_decile <- ifelse(descriptions_categories$average_score<decile6 & descriptions_categories$average_score>=decile5, 1, 0)
descriptions_categories$seventh_decile <- ifelse(descriptions_categories$average_score<decile7 & descriptions_categories$average_score>=decile6, 1, 0)
descriptions_categories$eighth_decile <- ifelse(descriptions_categories$average_score<decile8 & descriptions_categories$average_score>=decile7, 1, 0)
descriptions_categories$ninth_decile <- ifelse(descriptions_categories$average_score<decile9 & descriptions_categories$average_score>=decile8, 1, 0)
binomial1 <- glm(funding_dummy ~ first_decile + second_decile + third_decile + fourth_decile + fifth_decile + sixth_decile + seventh_decile + eighth_decile + ninth_decile + country, descriptions_categories, family="binomial")
summary(binomial1)
decile1
decile2
decile5
decile6
binomial1 <- glm(funding_dummy ~ top20 + second20 + third20 + fourth20 + country, descriptions_categories, family="binomial")
descriptions_categories$top20 <- ifelse(descriptions_categories$average_score>=decile8, 1, 0)
descriptions_categories$second20 <- ifelse(decile7==1 | decile8==1, 1, 0)
descriptions_categories$third20 <- ifelse(decile5==1 | decile6==1, 1, 0)
descriptions_categories$fourth20 <- ifelse(decile3==1 | decile4==1, 1, 0)
binomial1 <- glm(funding_dummy ~ top20 + second20 + third20 + fourth20 + country, descriptions_categories, family="binomial")
summary(binomial1)
descriptions_categories$top20 <- ifelse(descriptions_categories$average_score>=decile8, 1, 0)
descriptions_categories$second20 <- ifelse(descriptions_categories$average_score<decile8 & descriptions_categories$average_score>=decile6, 1, 0)
descriptions_categories$third20 <- ifelse(descriptions_categories$average_score<decile6 & descriptions_categories$average_score>=decile4, 1, 0)
descriptions_categories$fourth20 <- ifelse(descriptions_categories$average_score<decile4 & descriptions_categories$average_score>=decile2, 1, 0)
binomial1 <- glm(funding_dummy ~ top20 + second20 + third20 + fourth20 + country, descriptions_categories, family="binomial")
summary(binomial1)
quartile3
quartile2
quartile1
quartile25 <- quantile(descriptions_categories$average_score, 0.25)
quartile50 <- quantile(descriptions_categories$average_score, 0.50)
quartile75 <- quantile(descriptions_categories$average_score, 0.75)
descriptions_categories$first_quartile <- ifelse(descriptions_categories$average_score>=quartile75, 1, 0)
descriptions_categories$second_quartile <- ifelse(descriptions_categories$average_score<quartile75 & descriptions_categories$average_score>=quartile50, 1, 0)
descriptions_categories$second_quartile <- ifelse(descriptions_categories$average_score<quartile50 & descriptions_categories$average_score>=quartile25, 1, 0)
binomial1 <- glm(funding_dummy ~ first_quartile + second_quartile + third_quartile + country, descriptions_categories, family="binomial")
quartile25 <- quantile(descriptions_categories$average_score, 0.25)
quartile50 <- quantile(descriptions_categories$average_score, 0.50)
quartile75 <- quantile(descriptions_categories$average_score, 0.75)
descriptions_categories$first_quartile <- ifelse(descriptions_categories$average_score>=quartile75, 1, 0)
descriptions_categories$second_quartile <- ifelse(descriptions_categories$average_score<quartile75 & descriptions_categories$average_score>=quartile50, 1, 0)
descriptions_categories$third_quartile <- ifelse(descriptions_categories$average_score<quartile50 & descriptions_categories$average_score>=quartile25, 1, 0)
binomial1 <- glm(funding_dummy ~ first_quartile + second_quartile + third_quartile + country, descriptions_categories, family="binomial")
summary(binomial1)
binomial1 <- glm(funding_dummy ~ second_quartile + country, descriptions_categories, family="binomial")
summary(binomial1)
descriptions_categories$40_to_60 <- ifelse(descriptions_categories$average_score<0.6 & descriptions_categories$average_score>0.4, 1, 0)
binomial1 <- glm(funding_dummy ~ 40_to_60 + country, descriptions_categories, family="binomial")
descriptions_categories$middle_score <- ifelse(descriptions_categories$average_score<0.6 & descriptions_categories$average_score>0.4, 1, 0)
binomial1 <- glm(funding_dummy ~ middle_score + country, descriptions_categories, family="binomial")
summary(binomial1)
binomial1 <- glm(funding_dummy ~ second_quartile + country, descriptions_categories, family="binomial")
summary(binomial1)
quartile75
quartile50
decile4
decile6
descriptions_categories$middle_score <- ifelse(descriptions_categories$average_score<decile6 & descriptions_categories$average_score>decile4, 1, 0)
binomial1 <- glm(funding_dummy ~ middle_score + country, descriptions_categories, family="binomial")
summary(binomial1)
descriptions_categories$middle_score <- ifelse(descriptions_categories$average_score<0.55 & descriptions_categories$average_score>0.45, 1, 0)
#
binomial1 <- glm(funding_dummy ~ middle_score + country, descriptions_categories, family="binomial")
summary(binomial1)
descriptions_categories$middle_score <- ifelse(descriptions_categories$average_score<0.6 & descriptions_categories$average_score>0.5, 1, 0)
#
binomial1 <- glm(funding_dummy ~ middle_score + country, descriptions_categories, family="binomial")
summary(binomial1)
descriptions_categories$middle_score <- ifelse(descriptions_categories$average_score<=0.6 & descriptions_categories$average_score>=0.4, 1, 0)
#
binomial1 <- glm(funding_dummy ~ middle_score + country, descriptions_categories, family="binomial")
summary(binomial1)
library(quanteda)
dtm <- dfm(descriptions$descriptions, removePunct = TRUE)
dtm <- trim(dtm, minCount=5, minDoc=5)
dtm <- as.data.frame(dtm)
dtm$average_score <- descriptions$average_score
median <- quantile(dtm$average_score, 0.50)
dtm$training_var <- ifelse(dtm_train$average_score<median, 0, 1)
library(caret)
Train <- createDataPartition(dtm$training_var, p=0.5, list=FALSE)
dtm_train <- dtm[ Train, ]
dtm_test <- dtm[ -Train, ]
dtm_train$average_score <- NULL
dtm_test$average_score <- NULL
library(quanteda)
dtm <- dfm(descriptions$descriptions, removePunct = TRUE)
dtm <- trim(dtm, minCount=5, minDoc=5)
dtm <- as.data.frame(dtm)
dtm$average_score <- descriptions$average_score
median <- quantile(dtm$average_score, 0.50)
dtm$training_var <- ifelse(dtm$average_score<median, 0, 1)
library(caret)
Train <- createDataPartition(dtm$training_var, p=0.5, list=FALSE)
dtm_train <- dtm[ Train, ]
dtm_test <- dtm[ -Train, ]
dtm_train$average_score <- NULL
dtm_test$average_score <- NULL
library(useful)
theForm <- training_var ~ .
masterX <- build.x(theForm, data=dtm_train)
masterY <- build.y(theForm, data=dtm_train)
library(glmnet)
set.seed(102)
#glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
#plot(glm1, xvar="lambda", label=TRUE)
cv.glm1 <- cv.glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
plot(cv.glm1)
best_lambda <- cv.glm1$lambda.min
glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial', lambda=best_lambda)
#coefficient table
ind <- which(coef(glm1) != 0)
df <- data.frame(
feature=rownames(coef(glm1))[ind],
coefficient=coef(glm1)[ind]
)
df <- df[order(df$coefficient),]
kable(df, row.names = FALSE)
library(quanteda)
dtm <- dfm(descriptions$descriptions, removePunct = TRUE, ignoredFeatures = c(stopwords(), "창"))
dtm <- trim(dtm, minCount=5, minDoc=5)
dtm <- as.data.frame(dtm)
dtm$average_score <- descriptions$average_score
median <- quantile(dtm$average_score, 0.50)
dtm$training_var <- ifelse(dtm$average_score<median, 0, 1)
library(caret)
Train <- createDataPartition(dtm$training_var, p=0.5, list=FALSE)
dtm_train <- dtm[ Train, ]
dtm_test <- dtm[ -Train, ]
dtm_train$average_score <- NULL
dtm_test$average_score <- NULL
library(useful)
theForm <- training_var ~ .
masterX <- build.x(theForm, data=dtm_train)
masterY <- build.y(theForm, data=dtm_train)
library(glmnet)
set.seed(102)
#glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
#plot(glm1, xvar="lambda", label=TRUE)
cv.glm1 <- cv.glmnet(x=masterX,y=masterY,alpha=1,family='binomial')
plot(cv.glm1)
best_lambda <- cv.glm1$lambda.min
glm1<-glmnet(x=masterX,y=masterY,alpha=1,family='binomial', lambda=best_lambda)
#coefficient table
ind <- which(coef(glm1) != 0)
df <- data.frame(
feature=rownames(coef(glm1))[ind],
coefficient=coef(glm1)[ind]
)
df <- df[order(df$coefficient),]
kable(df, row.names = FALSE)
prediction <- predict(glm1, as.matrix(dtm_test), s=best_lambda, type="class")
probability <- predict(glm1, as.matrix(dtm_test), s=best_lambda, type="response")
View(prediction)
dtm_test$prediction <- as.vector(prediction)
dtm_test$prob <- as.vector(probability)
View(dtm_test)
View(dtm_test[1583:1584])
dtm_test$confidence <- abs(dtm_test$prob - .5)
View(dtm_test[1583:1585])
descriptions_test <-  descriptions_categories[ -Train, ]
descriptions_test$confidence <- dtm_test$confidence
binomial1 <- glm(funding_dummy ~ confidence + country, descriptions_test, family="binomial")
